/* -*- mode:C++; tab-width:4; c-basic-offset:4; indent-tabs-mode:nil -*- */
/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINEDITOR_H_8800F365__
#define __PLUGINEDITOR_H_8800F365__

#include <JuceHeader.h>
#include "PluginProcessor.h"
#include "CLCDView.h"
#include "gui/components/KnobBlue.h"
#include "gui/ControlGroupKnobs.h"


//==============================================================================
/**
*/
class MidiboxSidAudioProcessorEditor
    : public AudioProcessorEditor
    , public ChangeListener
    , public SliderListener
    , public ComboBoxListener
{
public:
    MidiboxSidAudioProcessorEditor (MidiboxSidAudioProcessor* ownerSidEmu);
    ~MidiboxSidAudioProcessorEditor();

    //==============================================================================
    /** Our demo SidEmu is a ChangeBroadcaster, and will call us back when one of
        its parameters changes.
    */
    void changeListenerCallback (ChangeBroadcaster *source);
  
    void sliderValueChanged (Slider*);
    void comboBoxChanged (ComboBox*);

    //==============================================================================
    // This is just a standard Juce paint method...
    void paint (Graphics& g);

    /** Standard Juce resize callback. */
    void resized();
  
	// CLCD
	CLcdView *cLcdView;

  
private:
    //==============================================================================
    ControlGroupKnobs* controlGroupKnobs;
    KnobBlue* gainSlider;
    ComboBox* patchComboBox;
    MidiKeyboardComponent* midiKeyboard;
    Label* infoLabel;
    ResizableCornerComponent* resizer;
    ComponentBoundsConstrainer resizeLimits;
    TooltipWindow tooltipWindow;

    ComboBox* midiOutputSelector;
    Label* midiOutputLabel;
    ComboBox* midiInputSelector;
    Label* midiInputLabel;

    void updateParametersFromSidEmu();
  
    // handy wrapper method to avoid having to cast the SidEmu to a AudioProcessing
    // every time we need it..
    MidiboxSidAudioProcessor* getSidEmu() const throw() { return (MidiboxSidAudioProcessor*) getAudioProcessor(); }
};


#endif  // __PLUGINEDITOR_H_8800F365__
