/* $Id: mios32_config.h.core32 451 2009-04-19 16:37:35Z stryd_one $ */
/*
vX32 pseudocode
not for any use whatsoever
copyright stryd_one
suck it 2008
big props to nILS for being my fourth eye
*/


#ifndef _MIOS32_CONFIG_H
#define _MIOS32_CONFIG_H


// disable code modules
#define MIOS32_DONT_USE_SYS
#define MIOS32_DONT_USE_SRIO
#define MIOS32_DONT_USE_DIN
#define MIOS32_DONT_USE_DOUT
#define MIOS32_DONT_USE_ENC
#define MIOS32_DONT_USE_AIN
#define MIOS32_DONT_USE_MF
//#define MIOS32_DONT_USE_LCD
//#define MIOS32_DONT_USE_MIDI
#define MIOS32_DONT_USE_COM
//#define MIOS32_DONT_USE_USB
//#define MIOS32_DONT_USE_USB_MIDI
//#define MIOS32_USE_USB_COM
#define MIOS32_DONT_USE_UART
#define MIOS32_DONT_USE_UART_MIDI
#define MIOS32_DONT_USE_IIC
#define MIOS32_DONT_USE_IIC_MIDI
//#define MIOS32_USE_I2S
//#define MIOS32_DONT_USE_BOARD
//#define MIOS32_DONT_USE_TIMER


// number of scanned SR registers on SRIO chain
// default value 16 (see mios32_srio.h)
//#define MIOS32_SRIO_NUM_SR 16

// Which SPI peripheral should be used
// allowed values: 1 and 2
// (note: SPI1 will allocate DMA channel 2 and 3, SPI2 will allocate DMA channel 4 and 5)
//MIOS32_SRIO_SPI 2

// should output pins be used in Open Drain mode? (perfect for 3.3V->5V levelshifting)
//MIOS32_SRIO_OUTPUTS_OD 1

// maximal number of rotary encoders
//MIOS32_ENC_NUM_MAX 64


// the default MIDI port for MIDI output
#define MIOS32_MIDI_DEFAULT_PORT USB0


// Following settings allow to customize the USB device descriptor
#define MIOS32_USB_VENDOR_ID    0x16c0        // sponsored by voti.nl! see http://www.voti.nl/pids
#define MIOS32_USB_VENDOR_STR   "midibox.org" // you will see this in the USB device description
#define MIOS32_USB_PRODUCT_STR  "vX32"      // you will see this in the MIDI device list
#define MIOS32_USB_PRODUCT_ID   0x03e8        // ==1000; 1020-1029 reserved for T.Klose, 1000 - 1009 free for lab use
#define MIOS32_USB_VERSION_ID   0x0100        // v1.00


// 1 to stay compatible to USB MIDI spec, 0 as workaround for some windows versions...
#define MIOS32_USB_MIDI_USE_AC_INTERFACE 1

// allowed number of USB MIDI ports: 1..8
#define MIOS32_USB_MIDI_NUM_PORTS 2

// buffer size (should be at least >= MIOS32_USB_MIDI_DATA_*_SIZE/4)
#define MIOS32_USB_MIDI_RX_BUFFER_SIZE   64 // packages
#define MIOS32_USB_MIDI_TX_BUFFER_SIZE   64 // packages

// size of IN/OUT pipe
#define MIOS32_USB_MIDI_DATA_IN_SIZE           64
#define MIOS32_USB_MIDI_DATA_OUT_SIZE          64


// sets the IIC bus frequency in kHz (400000 max!)
//#define MIOS32_IIC_BUS_FREQUENCY 400000

// sets the timeout value for IIC transactions (default: 5000 = ca. 5 mS)
//#define MIOS32_IIC_TIMEOUT_VALUE 5000

// sets the buffer size used for background transmit/receive
// (66 for EEPROM page writes: 2 bytes for address, 64 bytes for page)
//#define MIOS32_IIC_BUFFER_SIZE 66


// base address of first MBHP_IIC_MIDI module
//#define MIOS32_IIC_MIDI_ADDR_BASE 0x10

// max number of IIC MIDI interfaces (0..8)
// has to be set to >0 in mios32_config.h to enable IIC MIDI!
//#define MIOS32_IIC_MIDI_NUM 0

// Interface and RI_N port configuration
// _ENABLED:   0 = interface disabled
//             1 = interface enabled
//             2 = interface enabled, check RI_N pin instead of polling receive status
// _RI_N_PORT: Port to which RI_N is connected
// _RI_N_PIN:  pin to which RI_N is connected
//#define MIOS32_IIC_MIDI0_ENABLED    1
//#define MIOS32_IIC_MIDI0_RI_N_PORT  GPIOC
//#define MIOS32_IIC_MIDI0_RI_N_PIN   GPIO_Pin_0
//#define MIOS32_IIC_MIDI1_ENABLED    1
//#define MIOS32_IIC_MIDI1_RI_N_PORT  GPIOC
//#define MIOS32_IIC_MIDI1_RI_N_PIN   GPIO_Pin_1
//#define MIOS32_IIC_MIDI2_ENABLED    1
//#define MIOS32_IIC_MIDI2_RI_N_PORT  GPIOC
//#define MIOS32_IIC_MIDI2_RI_N_PIN   GPIO_Pin_2
//#define MIOS32_IIC_MIDI3_ENABLED    1
//#define MIOS32_IIC_MIDI3_RI_N_PORT  GPIOC
//#define MIOS32_IIC_MIDI3_RI_N_PIN   GPIO_Pin_3
//#define MIOS32_IIC_MIDI4_ENABLED    1
//#define MIOS32_IIC_MIDI4_RI_N_PORT  GPIOA
//#define MIOS32_IIC_MIDI4_RI_N_PIN   GPIO_Pin_0
//#define MIOS32_IIC_MIDI5_ENABLED    1
//#define MIOS32_IIC_MIDI5_RI_N_PORT  GPIOA
//#define MIOS32_IIC_MIDI5_RI_N_PIN   GPIO_Pin_1
//#define MIOS32_IIC_MIDI6_ENABLED    1
//#define MIOS32_IIC_MIDI6_RI_N_PORT  GPIOA
//#define MIOS32_IIC_MIDI6_RI_N_PIN   GPIO_Pin_2
//#define MIOS32_IIC_MIDI7_ENABLED    1
//#define MIOS32_IIC_MIDI7_RI_N_PORT  GPIOA
//#define MIOS32_IIC_MIDI7_RI_N_PIN   GPIO_Pin_3


// base address of first BankStick
//#define MIOS32_IIC_BS_ADDR_BASE 0xa0

// max number of BankSticks (0..8)
// has to be set to >0 in mios32_config.h to enable BankStick Support
//#define MIOS32_IIC_BS_NUM 0

// _SIZE: 0 = BankStick disabled, 32768 or 65536 = BankStick enabled with given size in kilobyte
//#define MIOS32_IIC_BS0_SIZE    32768
//#define MIOS32_IIC_BS1_SIZE    32768
//#define MIOS32_IIC_BS2_SIZE    32768
//#define MIOS32_IIC_BS3_SIZE    32768
//#define MIOS32_IIC_BS4_SIZE    32768
//#define MIOS32_IIC_BS5_SIZE    32768
//#define MIOS32_IIC_BS6_SIZE    32768
//#define MIOS32_IIC_BS7_SIZE    32768


// number of UART interfaces (1 or 2) - to disable UART at all, use "MIOS32_DONT_USE_UART" instead!
//#define MIOS32_UART_NUM 2

// Tx buffer size (1..256)
//#define MIOS32_UART_TX_BUFFER_SIZE 64

// Rx buffer size (1..256)
//#define MIOS32_UART_RX_BUFFER_SIZE 64

// Baudrate of UART first interface
//#define MIOS32_UART0_BAUDRATE 31250

// Baudrate of UART second interface
//#define MIOS32_UART1_BAUDRATE 31250

// Interface assignment: 0 = disabled, 1 = MIDI, 2 = COM
//#define MIOS32_UART0_ASSIGNMENT 1
//#define MIOS32_UART1_ASSIGNMENT 1


// maximum number of mapped CLCD lines
//#define MIOS32_LCD_MAX_MAP_LINES 4


// bit mask to enable channels
//
// Pin mapping on MBHP_CORE_STM32 module:
//   15       14      13     12     11     10      9      8   
// J16.SO  J16.SI  J16.SC J16.RC J5C.A11 J5C.A10 J5C.A9 J5C.A8
//   7        6       5      4      3      2      1       0
// J5B.A7  J5B.A6  J5B.A5 J5B.A4 J5A.A3 J5A.A2 J5A.A1  J5A.A0
//
// Examples:
//   mask 0x000f will enable all J5A channels
//   mask 0x00f0 will enable all J5B channels
//   mask 0x0f00 will enable all J5C channels
//   mask 0x0fff will enable all J5A/B/C channels
// (all channels are disabled by default)
//#define MIOS32_AIN_CHANNEL_MASK 0

// define the desired oversampling rate (1..16)
//#define MIOS32_AIN_OVERSAMPLING_RATE  1

// define the deadband (min. difference to report a change to the application hook)
// 31 is enough for 7bit resolution at 12bit sampling resolution (1x oversampling)
//#define MIOS32_AIN_DEADBAND 31

// muxed or unmuxed mode (0..3)?
// 0 == unmuxed mode
// 1 == 1 mux control line -> *2 channels
// 2 == 2 mux control line -> *4 channels
// 3 == 3 mux control line -> *8 channels
//#define MIOS32_AIN_MUX_PINS 0

// control pins to select the muxed channel
//#define MIOS32_AIN_MUX0_PIN   GPIO_Pin_4 // J5C.A8
//#define MIOS32_AIN_MUX0_PORT  GPIOC
//#define MIOS32_AIN_MUX1_PIN   GPIO_Pin_5 // J5C.A9
//#define MIOS32_AIN_MUX1_PORT  GPIOC
//#define MIOS32_AIN_MUX2_PIN   GPIO_Pin_0 // J5C.A10
//#define MIOS32_AIN_MUX2_PORT  GPIOB


// number of motorfaders (0-16)
//#define MIOS32_MF_NUM 0


//#define MIOS32_MF_RCLK_PORT  GPIOC
//#define MIOS32_MF_RCLK_PIN   GPIO_Pin_13
//#define MIOS32_MF_SCLK_PORT  GPIOB
//#define MIOS32_MF_SCLK_PIN   GPIO_Pin_6
//#define MIOS32_MF_DOUT_PORT  GPIOB
//#define MIOS32_MF_DOUT_PIN   GPIO_Pin_5

// should output pins be used in Open Drain mode? (perfect for 3.3V->5V levelshifting)
//#define MIOS32_MF_OUTPUTS_OD 0


// MCLK at J15b:E not enabled by default - has to be done in mios32_config.h
// if I2S chip requires "master clock" (for oversampling)
//#define MIOS32_I2S_MCLK_ENABLE  0

// supported by STM32: 
// I2S_Standard_Phillips, I2S_Standard_MSB, I2S_Standard_LSB,
// I2S_Standard_PCMShort, I2S_Standard_PCMLong
// note that "Philips" is written incorrectly (typo in STM32 driver)
//#define MIOS32_I2S_STANDARD     I2S_Standard_Phillips

// supported by STM32: 
// I2S_DataFormat_16b, I2S_DataFormat_16bextended, I2S_DataFormat_24b, I2S_DataFormat_32b
//#define MIOS32_I2S_DATA_FORMAT  I2S_DataFormat_16b;

// the sample rate in hertz
//#define MIOS32_I2S_AUDIO_FREQ   48000



#endif /* _MIOS32_CONFIG_H */

