$Id: MEMO 1795 2013-06-01 22:13:42Z tk $


Existing Wiki Pages for Toolchain installation:

Windows: http://www.midibox.org/dokuwiki/doku.php?id=windows_mios32_toolchain_core 
MacOS: http://www.midibox.org/dokuwiki/doku.php?id=installing_gnu_on_osx


Some additional (random) notes collected during the early evaluation phase.
These informations should go into the Wiki sooner or later.



Current Evaluation Boards
~~~~~~~~~~~~~~~~~~~~~~~~~

   o STM32 Primer
     -> http://www.st.com/mcu/contentid-105-110-STM3210B_PRIMER.html
     ca. 40 EUR
     STM32F103RB in 64-pin LQFP package with 128 Kbytes flash program 
     memory and 20 Kbytes SRAM and embedded communication peripherals 
     for USB, CAN, USART, SPI, I2C and LIN

   o MBHP_CORE_STM32 module
     -> http://www.uCApps.de/mbhp_core_stm32.html
     ca. 30 EUR
     STM32F103RE in 64-pin LQFP package with 512 Kbytes flash program 
     memory and 64 Kbytes SRAM and embedded communication peripherals 
     for USB, CAN, USART, SPI, I2C and LIN

   o MBHP_CORE_LPC17 module
     -> http://www.uCApps.de/mbhp_core_lpc17.html
     ca. 40 EUR
     LPC1769 in 100-pin LQFP package with 512 Kbytes flash program 
     memory and 64 Kbytes SRAM and embedded communication peripherals 
     for USB, CAN, USART, SPI, I2C, Ethernet

   o STM32F4 Discovery
     -> http://www.st.com/stm32f4-discovery
     ca. 17 EUR
     STM32F407 in 144-pin LQFP package with 1 MB flash program 
     memory and 192 Kbytes SRAM and embedded communication peripherals 
     for USB, CAN, USART, SPI, I2C, Ethernet



Downloading Repository
~~~~~~~~~~~~~~~~~~~~~~

Download the repository with:
   svn co svn://svnmios.midibox.org/mios32

If you have write access to the midibox.org SVN server, use:
   svn co svn+ssh://svn@midibox.org/mios32


Synching Repository
~~~~~~~~~~~~~~~~~~~

Just type "svn update" in the root directory of the repository


Environment Variables
~~~~~~~~~~~~~~~~~~~~~

Before compiling code, set the MIOS32 environment variables:

Unix (we assume, that the repository has been dowloaded into ~/svn)
  export MIOS32_PATH=~/svn/mios32/trunk
  export MIOS32_BIN_PATH=$MIOS32_PATH/bin


DOS: (we assume, that the repository has been downloaded to D:\)
  set MIOS32_PATH=/D/mios32/trunk
  set MIOS32_BIN_PATH=/D/mios32/trunk/bin


Additional environment variables to configure the environment:
(they have to be set, otherwise compiler will fail)

MBHP_CORE_STM32:
export MIOS32_GCC_PREFIX=arm-none-eabi
export MIOS32_FAMILY=STM32F10x
export MIOS32_PROCESSOR=STM32F103RE
export MIOS32_BOARD=MBHP_CORE_STM32
export MIOS32_LCD=universal


MBHP_CORE_STM32 with STM32F105RC (communication line):
export MIOS32_GCC_PREFIX=arm-none-eabi
export MIOS32_FAMILY=STM32F10x
export MIOS32_PROCESSOR=STM32F105RC
export MIOS32_BOARD=MBHP_CORE_STM32
export MIOS32_LCD=universal


STM32 Primer:
export MIOS32_GCC_PREFIX=arm-none-eabi
export MIOS32_FAMILY=STM32F10x
export MIOS32_PROCESSOR=STM32F103RB
export MIOS32_BOARD=STM32_PRIMER
export MIOS32_LCD=st7637

MBHP_CORE_LPC17 with LPCXPRESSO LPC1769:
export MIOS32_GCC_PREFIX=arm-none-eabi
export MIOS32_FAMILY=LPC17xx
export MIOS32_PROCESSOR=LPC1769
export MIOS32_BOARD=MBHP_CORE_LPC17
export MIOS32_LCD=universal

STM32F4 Discovery:
export MIOS32_GCC_PREFIX=arm-none-eabi
export MIOS32_FAMILY=STM32F4xx
export MIOS32_PROCESSOR=STM32F407VG
export MIOS32_BOARD=STM32F4DISCOVERY
export MIOS32_LCD=universal


Installing Toolchain
~~~~~~~~~~~~~~~~~~~~

Windows
=======

STM32 Primer: install the toolchain which comes with the CD (Ride7)

MBHP_CORE_STM32: dito (TODO: check if free available for download)
For uploading code, OpenOCD is required, a "known good" version
can be downloaded from: http://developer.berlios.de/project/showfiles.php?group_id=4148

Newer versions than v0.1.0 might fail (or not) for STM32 - they are continuosly
working on it.


MacOS
=====

STM32 Primer
------------

Excellent guide can be found under
-> http://www.paintyourdragon.com/uc/osxstm32/index.html
Note, that the installation of FatFryer is not required, as CircleOS
is not used. 

Installing MIOS32 Bootloader:
see http://www.ucapps.de/mios_bootstrap.html


MBHP_CORE_STM32
---------------

Excellent guide to install gcc for Cortex M3 can be found under
-> http://www.paintyourdragon.com/uc/osxstm32/index.html
Note, that the installation of FatFryer is not required, as CircleOS
is not used. 

Installing MIOS32 Bootloader:
see http://www.ucapps.de/mios_bootstrap.html


Linux
=====

STM32 Primer
------------

gcc sources can be downloaded from:
-> http://www.paintyourdragon.com/uc/osxstm32/index.html
and simply recompiled for your Linux installation

NOTE for Ubuntu users: you may have to install:
-buil-essential
-texinfo
-flex
-bison
If the compiler complains because can' t find "stdio_ext.h" try:
    sudo chmod 644 /usr/include/stdio_ext.h
and
    CFLAGS="$CFLAGS -I/usr/include"
to be sure that the C compiler is looking for headers in the right place.

Installing MIOS32 Bootloader:
see http://www.ucapps.de/mios_bootstrap.html


MBHP_CORE_STM32
---------------

gcc sources can be downloaded from:
-> http://www.paintyourdragon.com/uc/osxstm32/index.html
and simply recompiled for your Linux installation

Installing MIOS32 Bootloader:
see http://www.ucapps.de/mios_bootstrap.html



Quickstart STM32 Primer under DOS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We assume, that the MIOS32 repository has been downloaded to D:\mios32, and that
the Ride7 IDE (which comes with STM32 Primer) has been installed. We won't use
the IDE, but build & upload the application from the commandline instead.

So, all we need from Ride7 IDE is the gcc compiler:
   C:\Programs\Raisonance\Ride\arm-gcc
and the propritary code upload tool "cortex_pgm.exe" under:
   C:\Programs\Raisonance\Ride\bin

PATH variables should already be set correctly after Ride installation.

In addition, we need the same MinGW installation (with modified make.exe)
like used for the PIC based MIOS environment, see also:
   http://www.midibox.org/dokuwiki/windows_toolchain_core


a) set your environment variables to:
     set MIOS32_PATH=/D/mios32/trunk
     set MIOS32_BIN_PATH=/D/mios32/trunk/bin
     set MIOS32_FAMILY=STM32F10x
     set MIOS32_PROCESSOR=STM32F103RB
     set MIOS32_BOARD=STM32_PRIMER
     set MIOS32_LCD=st7637

   (note you could write this into a batch file)


b) go into an application directory, e.g.
     apps/examples/app_lcd/st7637


c) build the project with

     make -s

   (-s will lead to a less verbose output)


d) ensure that the STM32 Primer is connected to your PC
   (USB cable at the left side is for debugging interface)

e) upload the project with:

     cortex_pgm TSTM32F103RBT6 E B Pproject.hex S

   (cortex_pgm.exe is part of the Ride7 installation)
   (you could create a batch file for this command as well)


f) after upload the program will be executed automatically
   Red/Green LED should flicker very fast (probably will only see a solid light)
   The LCD should show a display animation



Quickstart MBHP_CORE_STM32 under DOS
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We assume, that the MIOS32 repository has been downloaded to D:\mios32, and that
an arm-gcc installation is available, which supports Cortex M3 
(TODO: check if free available from Raisonance website)

The command:
   arm-none-eabi-gcc --version
should return a version number >= 4.2.1

Sidenote: If you use a different arm-gcc installation (later, once properly 
integrated into gcc), you have to adapt your MIOS32_GCC_PREFIX setting, e.g.
from "arm-none-eabi" to the common "arm-elf"

a) set your environment variables to:
     set MIOS32_PATH=/D/mios32/trunk
     set MIOS32_BIN_PATH=/D/mios32/trunk/bin
     set MIOS32_FAMILY=STM32F10x
     set MIOS32_PROCESSOR=STM32F103RE
     set MIOS32_BOARD=MBHP_CORE_STM32
     set MIOS32_LCD=universal

   (note you could write this into a batch file)


b) go into an application directory, e.g.
     apps/tutorial/007_mios32_timer


c) build the project with

     make -s

   (-s will lead to a less verbose output)


d) upload the resulting project.hex file as described under
   http://www.ucapps.de/mios_bootstrap.html



Installing Insight Debugger
~~~~~~~~~~~~~~~~~~~~~~~~~~~

(Optional - Codeblocks seems to run more stable! See next section :)


Download Insight from
   http://sources.redhat.com/insight/
e.g.:
   ftp://sourceware.org/pub/insight/releases
version 6.8

go into installation dir
   mkdir build; cd build
   ../configure --target=$MIOS32_GCC_PREFIX --prefix=/usr/local/stm32 --disable-nls --enable-shared
   make
   sudo make install

Starting:
   $MIOS32_GCC_PREFIX-insight project.elf &
(assumed that /usr/local/stm32/bin is in your PATH variable)

MacOS: if you get following message
---
$MIOS32_GCC_PREFIX-insight project.elf 
dyld: Library not loaded: libitcl3.2.dylib
  Referenced from: /usr/local/stm32/bin/arm-none-eabi-insight
  Reason: image not found
Trace/BPT trap
---
use:
  export DYLD_LIBRARY_PATH=/usr/local/stm32/lib
to set the location of the dylibs


Target selection for insight (done in the GUI)
   GDBserver/TCP
   localhost
   3333



Installing Code::Blocks IDE/Debugger
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Download from http://www.codeblocks.org


Configuration steps:

1) create a new toolchain for GCC ARM:

- go to Settings->Compiler and debugger...
- Select "Global compiler settings"
- Select GNU GCC Compiler (if not already selected)
- press Copy button, new name: Cortex M3 GCC
- press "Toolchain executables" tab
- change compiler's directory, e.g. to /usr/local/mios32
- add "arm-none-eabi" prefix to all commands, e.g.
  arm-none-eabi-gcc
  arm-none-eabi-g++
  ..
  arm-none-eabi-gdb

- select "Debugger settings" (in the -> icon <- list... strange GUI),
and add following "Debugger initialisation commands":

--- STM32 ---
file project.elf
target remote localhost:3333
monitor reset halt
monitor wait_halt
monitor flash probe 0
monitor stm32x mass_erase 0
monitor flash write_image project.bin 0x08000000 bin
monitor halt
//thbreak main // can be commented in if app should stop at main() function
continue
--- STM32 ---


--- LPC17 ---
file project_built/project.elf
target remote localhost:3333
monitor halt
monitor flash erase_address 0x00000000 0x00080000
monitor flash write_image project_build/project.bin 0x00000000 bin
monitor reset
monitor halt
monitor flash write_image project_build/project.bin 0x00000000 bin
monitor reset
monitor halt
//thbreak main // can be commented in if app should stop at main() function
continue
--- LPC17 ---


2) define MIOS32 specific environment variables
- go to Settings->Environment Settings
- Select "Environment variables" tab, and add following variables:

(have to be adapted based on your pathes and requirements!)
(note that ~ doesn't work as shortcut for your home directory!)

--- STM32 ---
MIOS32_PATH=/Users/TK/svn/mios32/trunk
MIOS32_BIN_PATH=$MIOS32_PATH/bin
MIOS32_GCC_PREFIX=arm-none-eabi
MIOS32_FAMILY=STM32F10x
MIOS32_PROCESSOR=STM32F103RE
MIOS32_BOARD=MBHP_CORE_STM32
MIOS32_LCD=universal
--- STM32 ---

--- LPC17 ---
MIOS32_PATH=/Users/TK/svn/mios32/trunk
MIOS32_BIN_PATH=$MIOS_PATH/bin
MIOS32_GCC_PREFIX=arm-none-eabi
MIOS32_FAMILY=LPC17xx
MIOS32_PROCESSOR=LPC1769
MIOS32_BOARD=MBHP_CORE_LPC17
MIOS32_LCD=universal
--- LPC17 ---

MacOS users: add also
---
DYLD_LIBRARY_PATH=/usr/local/mios32/lib
---


3) Open a new, empty project
- copy an existing application into your project directory (or create the program inside the SVN tree)
- add at least "app.c" and "Makefile" to the project
- *NOW THE IMPORTANT STEP*
--> Right-click on your project, select "Properties..."
--> select "This is a custom Makefile" button


4) Building a project
press F9


5) Starting (and debugging) a project:
press F8
- this will download the application
- this will set a breakpoint at the main() function
- this will start the CPU
- CPU will stop at main() - continue from here

Note: don't use the Run button - there is nothing to be started on your PC



Unsorted
~~~~~~~~

For the case that you are trying a newer toolchain, which isn't listed above: take
care that it uses "arm-none-eabi" instead of "arm-elf" as target, otherwise you won't
be able to compile for Cortex-M3 anymore (e.g. "...ERROR: /Users/TK/Downloads/yagarto/install/lib/gcc/arm-elf/4.3.3/thumb2/libgcc.a(_arm_muldivdf3.o) uses VFP instructions, whereas project.elf does not"),
and you will notice incompatible data structures in DOSFS and uIP (all structure members 
aligned to 32bit instead of 8bit, which increases the RAM consumption and leads to wrong 
read-outs)

Yagarto: re-compiling the toolchain with arm-none-eabi helps (edit _env-only.sh)
